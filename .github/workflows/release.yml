name: Build and Release

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Cache Node.js modules
        id: cache-dependencies
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-
            ${{ runner.os }}-node-modules-

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "14.x"

      - name: Install dependencies
        run: npm ci

      - name: Build Electron App
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: npm run electron:build -p always

      - name: Get version from package.json
        id: get_version
        run: echo "app_version=$(node -p "require('./package.json').version")" | Out-File -FilePath $env:GITHUB_ENV -Append # no need for -Encoding utf8

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ env.app_version }}
          release_name: Release v${{ env.app_version }}
          draft: false
          prerelease: true

      - name: List dist_electron directory
        run: dir dist_electron

      - name: Upload artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist_electron/MyTools Setup ${{ env.app_version }}.exe
          asset_name: MyTools-Setup-${{ env.app_version }}.exe
          asset_content_type: application/octet-stream

      - name: Upload artifacts binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist_electron/MyTools Setup ${{ env.app_version }}.exe.blockmap
          asset_name: MyTools-Setup-${{ env.app_version }}.exe.blockmap
          asset_content_type: application/octet-stream

      - name: Upload artifacts yaml
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist_electron/latest.yml
          asset_name: latest.yml
          asset_content_type: text/x-yaml
